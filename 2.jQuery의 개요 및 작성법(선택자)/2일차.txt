2.jQuery의 개요 및 작성법(선택자)


Ajax 프로그래밍 순서

Step 1 : XMLHttpRequest 객체 구하기
Step 2 : XHR객체=>웹 서버에 요청 전송하기
Step 3 : 웹 서버의 응답->XHR=>
             화면에 반영하기(콜백함수)


1.script.js의 IdCheck()함수 주석->실행X

  자바스크립트 라이브러리  =>자바(~.jar)압축파일
                             자주 사용이 되는 함수나 중복된 코드가 포함된
                             함수를 하나의 작업단위로 묶어놓은것
                             ~.min.js(압축된 파일)
                             ~.js(압축안된 파일)

 prototype.js->jQuery==>$()함수

/*//중복ID체크 해주는 자바스크립트함수 선언
function idCheck(id){ //mem_id.value
   if(id==""){
	   alert("아이디를 먼저 입력하세요")
	   document.regForm.mem_id.focus()//document.폼객체명.입력양식.함수명(~)
   }else{ //IdCheck.jsp?매개변수명=전달할값->IdCheck.jsp->checkId(id)
	   //IdCheck.jsp를 요청->매개변수를 전달하는 이유->DB에 접근=>id확인
	   url="IdCheck.jsp?mem_id="+id
	   window.open(url,"post","left=450,top=150,width=300,height=150")
   }
}*/

prototype.js의 1818라인번호
===================================================
function $(element) {
  if (arguments.length > 1) {
    for (var i = 0, elements = [], length = arguments.length; i < length; i++)
      elements.push($(arguments[i]));
    return elements;
  }
  if (Object.isString(element))
    =======================================================================
    element = document.getElementById(element);//이것때문에 prototype.js사용
    =========================================================================
  return Element.extend(element);
}


2.Register.jsp에서 자바스크립트 라이브러리 불러오기

<script language="JavaScript" src="script.js?ver=2"></script>
<script language="JavaScript" src="prototype.js" ></script>
<script language="JavaScript" src="searchWord.js"></script>

3.화면의 특정위치에 출력시켜주기 위해서 id값을 부여(Register.jsp)

<input type="text" name="mem_id" size="15">
		      <input type="button" value="ID중복확인" 
                         onClick="idCheck(this.form.mem_id.value)"></td>
<td id="ducheck" width="27%">아이디를 적어 주세요.</td>
 ============================

4.searchWord.js=>Ajax를 이용->xhr객체를 생성->IdCheck.jsp에 요청

var xhrObject //xhr객체를 전역변수로 선언

//1.xhr객체를 생성시키는 함수 선언
function createXHR(){ //function 호출할 함수명(~){} 
	if(window.XMLHttpRequest){//XMLHttpRequest을 가지고 있다면
		xhrObject=new XMLHttpRequest();//객체를 생성하는 구문(함수)
		alert(xhrObject)
	}
}

//2.중복id를 입력->xhr객체->요청->처리해주는 함수
function idCheck(id){  //Register.jsp
	if(id==""){
		//var mem_id=document.getElementById("ducheck");//<td>정보
		var mem_id=$("ducheck")
		alert(mem_id)//[object~]
	$("ducheck").innerHTML="<font color='red'>아이디를 먼저 입력요망</font>"
		//document.regForm.mem_id.focus() 순수 자바스크립트 구문
		$("mem_id").focus()
		return false;
	}
	//입력했다면->Ajax를 이용해서 IdCheck.jsp를 요청
	//1.xhr객체생성
	createXHR()//xhrObject
	var url="http://localhost:8090/JspMember/IdCheck.jsp?"+getParameterValues()
	alert(url)
	//2.콜백함수 지정
	xhrObject.onreadystatechange=resultProcess
	//3.open함수를 이용 서버에 요청준비
	xhrObject.open("Get",url,true)//비동기
	//4.send()요청
	xhrObject.send(null);
}

//3.새로고침 기능을 구현->파라미터값을 전달해주는 함수
//뒤에 반복적인 요청을 하지 않도록 오늘날짜의 시간을 뒤에 추가->매번 새로운요청
//서버의 메모리에 저장->바로바로 새로고침이 된다.

function getParameterValues(){
	var mem_id=$("mem_id").value  //document.RegForm.mem_id.value
	return "mem_id="+mem_id+"&timestamp="+new Date().getTime()
}

//4.콜백함수->특정위치에 화면에 결과를 출력
function resultProcess(){   //xml,text(html태그 포함한 문자열)
	alert("resultProcess")
	if(xhrObject.readyState==4){//서버에게 요청을 정상적으로 처리했다면
		if(xhrObject.status==200){//서버의 결과를 받았다면
			var result=xhrObject.responseText;//태그+문자열=문자열
			$("ducheck").innerHTML=result;
		}
	}
}
---------------------------------------------------------
5.IdCheck.jsp

<%
   //searchWord.js->idCheck(id)->IdCheck.jsp?mem_id='nup'&timestamp=~
   //요청한 실행결과를 text/xml로 만들어서 전송하고 싶다.
   response.setContentType("text/xml;charset=utf-8");//동적
   //추가 ->xhr객체가 받을 xml형태로 받을 수 있도록 text/xml형태로 전환(태그+문자열)
   String outString="";//xhr객체에서 전달할 내용을 담을 변수 선언(태그+문자열)
   //----------------------------------------------------------------------------
   String mem_id=request.getParameter("mem_id");
   System.out.println("IdCheck.jsp에 전달된 mem_id=>"+mem_id);//null
   //DB접속 
   MemberDAO memMgr=new MemberDAO();
   boolean check=memMgr.checkId(mem_id);
   System.out.println("IdCheck.jsp의 check=>"+check);
   //xhr객체에 전송해주는 구문
   if(check==true){//이미 사용중인 아이디가 존재한다면
	   outString="<font color='red'><b>이미 사용중인 아이디!</b></font>";
   }else{//사용이 가능한경우
	   outString="<font color='blue'><b>사용이 가능한 아이디!</b></font>";
   }
   //xhr객체가 받을 수 있도록 전송
   out.println(outString);
   System.out.println(outString);
%>
=======================================================================
2/23일 오후 4:20 (2시간)->Jsp 1일차~jQuery 다음주 수요일 2/21일 배운범위
========================================================================
발표:2/22일 오후 4:40분 정도=> 5분정도=>5~6장(주제,주제선정이유, 팀원소개,팀장)
                           프로젝트 일정=>이번주에 작업한 내용발표
                                          다음주에 할내용 발표
                           ========================================
                           모델링이 끝난후에 작업(업무분장까지)
                           ========================================
---------------------------------------------------------------------------
** 외부에서 전에 작업한 내용을 가지고 있는 프로젝트파일을 불러오는 방법**

배포->usb에 담아서, 메일보내기(파일로 저장)

 jQueryTest
      |
       -0.ajax
      |
       -1.selector->01.ready.html~2.html
        2.dom
        ,,,,
========================================================
www.w3schools.com에서 찾아서 예제

        www.jquery.com->기본 사이트->3.x버전
jQuery->http://code.jquery.com->1.x, 2.x, 3.x버전(브라우저의 버전에 따라서)
                                ======>구버전의 브라우저를 사용
                                       호환성의 문제때문에

 자바스크립트의 라이브러리->jQuery(개발하기가 용이하게 설계)
 *** API 문서를 참조->예제 ***

Download the compressed, production jQuery 3.3.1
     -->압축된 jquery라이브러리 파일을 다운로드 받는 경우
     --.>~.min.js로 끝나는 파일(내용 확인 불가)

Download the uncompressed, development jQuery 3.3.1
      -->압축이 안된 파일->내용을 꺼내 볼 수 가 있다.(편집기)

  ==>실행속도가 제일 빠르다.

 CDN->직접 jQuery가 제공된 사이트에 접속=>template작성할때 사용
 ==>실행속도가 좀 느리다.
============================================================
   code.jquery.com->전체 버전이 다 존재 링크

 *** jquery의 특징 ***

1.일단 무료, 오픈소스
2.작은 용량 (min : 18KB, uncompressed : 114KB)
3.수많은 사용자 커뮤니티
4.웹 브라우저간의 차이를 자체적으로 표준화
5.플러그인의 다양성->편리성 추가
6.잘 정리된 API 문서 
7.브라우저보다 앞선 W3C 명세 수용->www.w3c.org(html5,css3,javascript
                                               표준화 발표)
8.사용자인터페이스 제공
***9.chain method방법을 사용해서 코딩***

 ** jquery의 사용목적 **

*** Write less, do more (적게 작성하고, 보다 많이 한다. )***
 =>적게사용하고 기능은 다양하게 구현

CSS Selector 로 요소를 찾아 Method로 작업을 수행 
                (태그)

ready()

모든 DOM 탐색과 조작은 DOM이 완전하게 로드 되는 것을 요구
  --->동영상,이미지,텍스트-->메모리에 전부 올려놓고 작업

window.onload 이벤트 사용시 모든 자원을 포함하여 전체 문서가 완전히 로드 되어야 onload 이벤트가 발생하므로 방문자로 하여금 지나치게 많은 시간을 기다리게 만듦
DOM 자체가 탐색과 조작을 위한 준비를 끝냈음을 알리는 이벤트가 필요
  ==>속도가 느려진다.(단점)

ready() Method =>기능을 써놓은 코드부터 작동

DOM이 탐색 및 조작될 준비가 되면 실행되는 스크립트 코드를 가짐


  3개의 ready함수 표현법이 동일하다.
--------------------------------------------
//(3)속도가 빠른 jQuery ready함수를 이용
  $(document).ready(function(){ //document객체를 이용->메모리에 올리기전에
	  alert("jQuery소개2")
  })
  
  $().ready(function(){ 
	  alert("함수를 호출2!!!")
  })
  
  $(function(){ 
	  alert("함수를 호출3!!!")
  })

 03chain.html->jQuery Template,jQueryMobile Template 방법
--------------------------------------------------------------
<script>
  $(function(){ 
	  //var test=document.getElementsByTagName('h2')//태그이름->태그정보(객체)
      var test=$('h2')
      alert(test)//[Object object] 태그정보->$('h2').css(~)
     /*   chain method방식으로 jquery함수 호출
      특정태그에 대해서 함수를 호출할때 여러개를 마치 체인처럼 나열하는 방식
      =>chaining method
      test.css('font-family','궁서체')
      test.css('font-size','30pt')
      test.css('color','red') */
      test.css('font-family','돋움체').css('font-size','24pt').css('color','blue')
  })
</script>
==============================================================
04.each.html=>스타일을 적용

newItem.setAttribute("id","item_"+count)//<div id=item_1 ></div
->jQuery함수

05.each2.html=>

======================================================
 태그의 속성을 찾아내는 방법=>속성값을 지정해주는 방법
 attribute=>[] ^,~=>pdf,html(),text(),val()

 <li id="test">
 <li id="test2">
========================================================
1.selector(jquery)-->2.dom=>jquery 함수
===================================